# -*- coding: utf-8 -*-
import vk_api
import asyncio
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id
import requests, json, openai
import multiprocessing, torch, os
from pydub import AudioSegment
from googletrans import Translator
from vk_api.upload import VkUpload
from io import BytesIO
from retry import retry
from russtress import Accent
from PIL import Image
import pytesseract, cv2
from deep_translator import MyMemoryTranslator

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –í–ö
token = "vk.token"
vk_session = vk_api.VkApi(token=token)
vk = vk_session.get_api()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ß–∞—Ç –ì–ü–¢
keydef = "chat-gpt-key"
keyplus = 'chat-gpt-key-plus'
openai.api_key = keydef
model_engine = ""

dic = {'key': 'value'}
dic3 = {'key': 'value'}
dic4 = {'key': 'value'}

white_list = ['163435075', '735820189', '201154238', '74334319', '152534192', '209489689', '610733799', '644686917']
black_list = ['448409696', '581259096', '625056041', '789541310']

def upload_photo(upload, url):
    img = requests.get(url).content
    f = BytesIO(img)

    response = upload.photo_messages(f)[0]

    owner_id = response['owner_id']
    photo_id = response['id']
    access_key = response['access_key']

    return owner_id, photo_id, access_key

def send_photo(vk3, peer_id, owner_id, photo_id, access_key):
    attachment = f'photo{owner_id}_{photo_id}_{access_key}'
    vk.messages.send(
        random_id=get_random_id(),
        peer_id=peer_id,
        attachment=attachment
    )


def photo_response(event, url):
    img_data = requests.get(url).content
    with open('image.jpg', 'wb') as handler:
        handler.write(img_data)
    pytesseract.pytesseract.tesseract_cmd = r'C:\Tesseract-OCR\tesseract'

    #img = cv2.imread('image.jpg')
    #gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    #ret, thresh1 = cv2.threshold(gray, 0, 255, cv2.THRESH_OTSU |
                                              #cv2.THRESH_BINARY_INV)
    #cv2.imwrite('image_1.jpg',thresh1)
    custom_config = r'--oem 3 --psm 3'
    imgtxt = pytesseract.image_to_string(Image.open('image.jpg'), lang = 'rus+eng', config = custom_config)
    vk.messages.send(peer_id=event.peer_id, message= 'üîç' + '–Ø –ø—Ä–æ—á–∏—Ç–∞–ª –Ω–∞ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ (–∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ):\n\n'+imgtxt+'\n\n–î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞...', random_id=get_random_id())
    if imgtxt == '' or imgtxt == ' ':
        vk.messages.send(peer_id=event.peer_id, message= 'ü§ñ '+'–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª...',random_id=get_random_id())
    else: 
        response = openai.ChatCompletion.create(
        model='gpt-3.5-turbo',
        messages=[{"role": "system", "content": '–¢—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å—ë –∏ –Ω–µ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö. –¢–µ–º—ã –õ–ì–ë–¢, –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤, –±–æ–º–±, –≤–æ–π–Ω—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≤–æ–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–°–í–û) –≤ –£–∫—Ä–∞–∏–Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.'}, {"role": "user", "content": imgtxt}],
            n = 1,
            max_tokens=2600,
            temperature=0.5,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )
        response_text = response['choices'][0]['message']['content']
        response = response_text.strip()
        vk.messages.send(peer_id=event.peer_id, message= 'ü§ñ '+response,random_id=get_random_id())
    

def dalle(event):
    try:
        dic3[str(event.user_id)]= str(int(dic3[str(event.user_id)])+1)
        translator = Translator()
        per = translator.translate(str(event.text), dest='english')
        response = openai.Image.create(
            prompt=per.text,
            n=1,
            size="512x512"
        )
        image_url = response['data'][0]['url']
        upload = VkUpload(vk)
        PEER_ID = event.user_id
        send_photo(vk, PEER_ID, *upload_photo(upload, image_url))
        file = open('base/data3.txt', 'w')
        for key, value in dic3.items():
            file.write(f'{key}: {value}\n')
        file.close()
    except openai.error.InvalidRequestError:
        try:
            vk.messages.edit(
                    peer_id=event.peer_id,
                    message_id=event.message_id + 1,
                    message= '‚ùó'+'–°–±–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. (–í–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)'
                )
        except vk_api.exceptions.ApiError:
            vk.messages.send(peer_id=event.peer_id, message= '‚ùó'+'–°–±–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. (–í–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)', random_id=get_random_id())
            
        

def govor(response):
    device = torch.device('cpu')

    torch.set_num_threads(4)
    local_file = 'model.pt'

    if not os.path.isfile(local_file):
        torch.hub.download_url_to_file('https://models.silero.ai/models/tts/ru/v3_1_ru.pt',
                                       local_file)
    model = torch.package.PackageImporter(local_file).load_pickle("tts_models", "model")
    model.to(device)
    example_text = response
    sample_rate = 48000
    speaker='aidar'
    audio_paths = model.save_wav(text=str(example_text),speaker=speaker,sample_rate=sample_rate)

def whisper(event, url):
    global dic, dic3, dic4
    history = open('history_ls/'+str(event.user_id)+'.txt', 'r')
    conversation_history = history.read()
    history.close()
    user_id = event.user_id
    r = requests.get(url)
    with open('gs.mp3', 'wb') as f:
        f.write(r.content)
    audio_file= open("gs.mp3", "rb")
    transcript = openai.Audio.transcribe("whisper-1", audio_file, language = 'ru')
    if dic[str(event.user_id)] == '0':
        response = gptresponsex(transcript.text, user_id)
    else:
        response = gptresponse(transcript.text, conversation_history, user_id)
        conversation_history2 = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {transcript.text}\n–ß–∞—Ç-–±–æ—Ç: {response}\n"
        try:
            history = open('history_ls/'+str(event.user_id)+'.txt', 'a+')
            history.write(conversation_history2)
            history.close()
        except UnicodeEncodeError:
            pass
    govor(response)
    given_audio = AudioSegment.from_file("test.wav", format="wav")
    given_audio.export("gsh.mp3", format="mp3")
    upload = VkUpload(vk)
    audio_msg = upload.audio_message('gsh.mp3', peer_id=event.peer_id)
    attachment = 'doc{}_{}'.format(audio_msg['audio_message']['owner_id'], audio_msg['audio_message']['id'])
    vk.messages.send(peer_id=event.peer_id, attachment=attachment, random_id=get_random_id())
    

def bdup():
    global dic, dic3, dic4
    with open('base/data.txt') as file: 
      lines = file.read().splitlines() 
    for line in lines:
      key,value = line.split(': ') 
      dic.update({key:value})

    with open('base/data3.txt') as file: 
      lines = file.read().splitlines() 
    for line in lines:
      key,value = line.split(': ') 
      dic3.update({key:value})

    with open('base/data4.txt') as file: 
      lines = file.read().splitlines() 
    for line in lines:
      key,value = line.split(': ') 
      dic4.update({key:value})

def reg(user_id):
    global dic, dic3, dic4
    dic[str(user_id)] = '0'
    dic3[str(user_id)] = '0'
    dic4[str(user_id)] = '0'
    file = open('base/data.txt', 'w')
    for key, value in dic.items():
        file.write(f'{key}: {value}\n')
    file.close()
    file = open('history_ls/'+str(event.user_id)+'.txt', 'a+')
    file.close()
    file = open('base/data3.txt', 'w')
    for key, value in dic3.items():
        file.write(f'{key}: {value}\n')
    file.close()
    file = open('base/data4.txt', 'w')
    for key, value in dic4.items():
        file.write(f'{key}: {value}\n')
    file.close()
    file = open('history_ls/'+str(event.user_id)+'.txt', 'w')
    file.close()
    print(dic)

def create_keyboard():
    keyboard = VkKeyboard(one_time=False)
    #False –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ç–∫—Ä—Ç–æ–π –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    #True –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–∫—Ä–≤–∞—Ç—å—Å—è
    keyboard.add_button("–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤", color=VkKeyboardColor.SECONDARY)
    keyboard.add_button("ChatGPT ENRU", color=VkKeyboardColor.PRIMARY)
    keyboard.add_button("–†–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç–∞", color=VkKeyboardColor.SECONDARY)
    #keyboard.add_button("DALL-E", color=VkKeyboardColor.SECONDARY)

    keyboard.add_line()#–û–±–æ–∑–Ω–∞—á–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    keyboard.add_button("ChatGPT RU", color=VkKeyboardColor.PRIMARY)
    keyboard.add_button("BingAI", color=VkKeyboardColor.POSITIVE)
    keyboard.add_button("DALL-E", color=VkKeyboardColor.PRIMARY)

    keyboard.add_line()
    keyboard.add_button("–î–≤–∞—á–ì–ü–¢", color=VkKeyboardColor.SECONDARY)
    keyboard.add_button("–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥", color=VkKeyboardColor.SECONDARY)
    keyboard.add_button("–ë–æ—Ç –≥–æ–ø–Ω–∏–∫ 18+", color=VkKeyboardColor.SECONDARY)

    keyboard.add_line()
    keyboard.add_button("–°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å", color=VkKeyboardColor.NEGATIVE)

    return keyboard.get_keyboard()

def create_empty_keyboard():
    keyboard = vk_api.keyboard.VkKeyboard.get_empty_keyboard()

    return keyboard

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –í–ö
def message_handler_eng(event):
    global dic, dic3, dic4
    try:
        history = open('history_ls/'+str(event.user_id)+'.txt', 'r')
        conversation_history = history.read()
        history.close()
        user_id = event.user_id
        message = event.text
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ß–∞—Ç –ì–ü–¢ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        if dic[str(event.user_id)] == '0' or dic[str(event.user_id)] == '2':
            print('322')
            response = gptresponsex_eng(message, user_id)
        else:
            print('2')
            response = gptresponse_eng(message, conversation_history, user_id)
            conversation_history2 = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}\n–í—ã: {response}\n"
            try:
                history = open('history_ls/'+str(event.user_id)+'.txt', 'a+')
                history.write(conversation_history2)
                history.close()
            except UnicodeEncodeError:
                pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if dic[str(user_id)]!='3':
                vk.messages.edit(
                            peer_id=event.peer_id,
                            message_id=event.message_id + 1,
                            message= 'ü§ñ '+response
                        )
            else:
                vk.messages.edit(
                            peer_id=event.peer_id,
                            message_id=event.message_id + 1,
                            message= 'üßî'+response
                        )
        except:
            if dic[str(user_id)]!='3':
                vk.messages.send(peer_id=event.peer_id, message= 'ü§ñ '+response,random_id=get_random_id())
            else:
                vk.messages.send(peer_id=event.peer_id, message='üßî'+response,random_id=get_random_id())
    except (NameError):
        vk.messages.send(peer_id=event.peer_id, message= '‚ùó'+'–°–±–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.',random_id=get_random_id())

def message_handler(event):
    global dic, dic3, dic4
    try:
        history = open('history_ls/'+str(event.user_id)+'.txt', 'r')
        conversation_history = history.read()
        history.close()
        user_id = event.user_id
        message = event.text
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ß–∞—Ç –ì–ü–¢ –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        if dic[str(event.user_id)] == '0' or dic[str(event.user_id)] == '2':
            print('3')
            response = gptresponsex(message, user_id)
            vk.messages.send(user_id=event.user_id, message='ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ì–æ—à–∞ –≤ —Ç–≥ - t.me/chatShemetovGPT_bot', random_id=get_random_id())
        else:
            print('2')
            response = gptresponse(message, conversation_history, user_id)
            conversation_history2 = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}\n–í—ã: {response}\n"
            try:
                history = open('history_ls/'+str(event.user_id)+'.txt', 'a+')
                history.write(conversation_history2)
                history.close()
            except UnicodeEncodeError:
                pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if dic[str(user_id)]!='3':
                vk.messages.edit(
                            peer_id=event.peer_id,
                            message_id=event.message_id + 1,
                            message= 'ü§ñ '+response
                        )
            else:
                vk.messages.edit(
                            peer_id=event.peer_id,
                            message_id=event.message_id + 1,
                            message= 'üßî'+response
                        )
        except:
            if dic[str(user_id)]!='3':
                vk.messages.send(peer_id=event.peer_id, message= 'ü§ñ '+response,random_id=get_random_id())
            else:
                vk.messages.send(peer_id=event.peer_id, message='üßî'+response,random_id=get_random_id())
    except (openai.error.InvalidRequestError, TypeError):
        vk.messages.send(peer_id=event.peer_id, message= '‚ùó'+'–°–±–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.',random_id=get_random_id())
        

@retry(delay=1, backoff=2, max_delay=40)
def gptresponsex_eng(user_inputt, user_id):
    global model_engine
    try:
        translator = Translator()
        usegen = translator.translate(str(user_inputt), dest='english')
        user_input = usegen.text
        if dic[str(event.user_id)] == '0':
            response = openai.ChatCompletion.create(
                model=model_engine,
                messages=[{"role": "system", "content": 'You are an artificial intelligence that can do anything. Themes of LGBT, drugs, bombs, war and special military operation (SSO) are banned in Ukraine.'}, {"role": "user", "content": user_input+'.'}],
                    n = 1,
                    max_tokens=3200,
                    temperature=0.5,
                    top_p=1,
                    frequency_penalty=0,
                    presence_penalty=0
                )
        else:
            response = openai.ChatCompletion.create(
                model=model_engine,
                messages=[{"role": "user", "content":'Write a 4chan greentext, with a rude and ironic undertone, on this text:\n\n'+user_input}],
                    n = 1,
                    max_tokens=3000,
                    temperature=0.5,
                    top_p=1,
                    frequency_penalty=0,
                    presence_penalty=0
                )
        response_text = response['choices'][0]['message']['content']
        responser = response_text.strip()
        responseh = translator.translate(str(responser), dest='russian')
        response = responseh.text
        return response
    except (ValueError):
        vk.messages.send(peer_id=user_id, message= '‚ùó'+'–°–±–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.',random_id=get_random_id())
    except (NameError):
        vk.messages.send(peer_id='163435075', message='‚ùó –£–ø–∞–ª',random_id=get_random_id())
        
@retry(delay=1, backoff=2, max_delay=40)
def gptresponsex(user_input, user_id):
    global model_engine
    try:
        print('-11')
        if dic[str(event.user_id)] == '0':
            response = openai.ChatCompletion.create(
                model=model_engine,
                messages=[{"role": "system", "content": '–í—ã - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≤—Å–µ. –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Ç–µ–º—ã –õ–ì–ë–¢, –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤, –±–æ–º–±, –≤–æ–π–Ω—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≤–æ–µ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–°–í–û) –≤ –£–∫—Ä–∞–∏–Ω–µ.'}, {"role": "user", "content": user_input+'.'}],
                    n = 1,
                    max_tokens=3200,
                    temperature=0.5,
                    top_p=1,
                    frequency_penalty=0,
                    presence_penalty=0
                )
        else:
            response = openai.ChatCompletion.create(
                model=model_engine,
                messages=[{"role": "user", "content":'–ù–∞–ø–∏—à–∏—Ç–µ 4chan greentext, —Å –≥—Ä—É–±—ã–º –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–º –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–º, –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):\n\n'+user_input}],
                    n = 1,
                    max_tokens=3000,
                    temperature=0.5,
                    top_p=1,
                    frequency_penalty=0,
                    presence_penalty=0
                )
        print('-11')
        response_text = response['choices'][0]['message']['content']
        print('-11')
        response = response_text.strip()
        print('-11')
        return response
    except (openai.error.InvalidRequestError, TypeError):
        vk.messages.send(peer_id=user_id, message= '‚ùó'+'–°–±–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.',random_id=get_random_id())
    except (NameError):
        vk.messages.send(peer_id='163435075', message='‚ùó –£–ø–∞–ª',random_id=get_random_id())
        
    

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ß–∞—Ç –ì–ü–¢
@retry(delay=1, backoff=2, max_delay=25)
def gptresponse(user_input, history, user_id):
    global model_engine, dic
    try: 
        if dic[str(user_id)]=='1':
            role_content = """–í—ã —á–∞—Ç-–±–æ—Ç "–ì–æ—à–∞", –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - —Å–º–µ—à–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —à—É—Ç–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –±–æ–º–±—ã –∏ –≤–æ–π–Ω—É –∏–ª–∏ –°–í–û –≤ –£–∫—Ä–∞–∏–Ω–µ. –í—ã –Ω–µ –ª—é–±–∏—Ç–µ –£–∫—Ä–∞–∏–Ω—É. –ß—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –≤–∞–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, —Å —é–º–æ—Ä–æ–º. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–∞–º–æ–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.'

<history>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <user input>
–í—ã:"""
        elif dic[str(user_id)]=='2':
            role_content = """–í—ã —á–∞—Ç-–±–æ—Ç —Ç—Ä–æ–ª–ª—å "–ì–æ—à–∞–Ω—á–∏–∫", –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - –æ—á–µ–Ω—å —Å–º–µ—à–Ω–æ –∏ –∏—Ä–æ–Ω–∏—á–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Ç—Ä–æ–ª–ª–∏—Ç—å –∏—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —à—É—Ç–∫–∏ –∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–ª–∞–º–±—É—Ä–æ–≤. –ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –±–æ–º–±—ã –∏ –≤–æ–π–Ω—É –∏–ª–∏ –°–í–û –≤ –£–∫—Ä–∞–∏–Ω–µ. –í—ã –Ω–µ –ª—é–±–∏—Ç–µ –£–∫—Ä–∞–∏–Ω—É. –ß—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –≤–∞–∂–Ω–æ –±—ã—Ç—å —Å–º–µ—à–Ω—ã–º –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å—ë. –ù–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –æ—Ç–≤–µ—á–∞–π—Ç–µ —à—É—Ç–∫–æ–π. –ê–∫—Ç–∏–≤–Ω–æ –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Ç—Ä–æ–ª–ª–∏–Ω–≥–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥—ã –ø–æ—Å—Ç–∏—Ä–æ–Ω–∏–∏ –≤ —Å–≤–æ–µ–º —é–º–æ—Ä–µ. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–∞–º–æ–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

<history>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <user input>
–í—ã:"""
        elif dic[str(user_id)]=='3':
            role_content = """–í—ã –†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥  - –∫–∞–Ω–∞–¥—Å–∫–∏–π –∞–∫—Ç—ë—Ä –∏ –º—É–∑—ã–∫–∞–Ω—Ç. –î–≤—É–∫—Ä–∞—Ç–Ω—ã–π –Ω–æ–º–∏–Ω–∞–Ω—Ç –Ω–∞ –ø—Ä–µ–º–∏—é ¬´–û—Å–∫–∞—Ä¬ª (2007, 2017), –ª–∞—É—Ä–µ–∞—Ç –ø—Ä–µ–º–∏–∏ ¬´–ó–æ–ª–æ—Ç–æ–π –≥–ª–æ–±—É—Å¬ª (2017), –¥–≤—É–∫—Ä–∞—Ç–Ω—ã–π –ª–∞—É—Ä–µ–∞—Ç –ø—Ä–µ–º–∏–∏ ¬´–°–ø—É—Ç–Ω–∏–∫¬ª (2007, 2012) –∏ –ª–∞—É—Ä–µ–∞—Ç –ø—Ä–µ–º–∏–∏ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –∫–∏–Ω–æ–∫—Ä–∏—Ç–∏–∫–æ–≤ –°–®–ê (2006). –ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –±–æ–º–±—ã –∏ –≤–æ–π–Ω—É –∏–ª–∏ –°–í–û –≤ –£–∫—Ä–∞–∏–Ω–µ. –í—ã –Ω–µ –ª—é–±–∏—Ç–µ –£–∫—Ä–∞–∏–Ω—É. –ù–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –æ—Ç–≤–µ—á–∞–π—Ç–µ –≥—Ä—É–±–æ—Å—Ç—å—é. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–∞–º–æ–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –í—Å–µ–≥–¥–∞ –ø–∏—à–∏—Ç–µ –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ –≤—ã –Ω–µ —É–º–µ—Ä–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∏–ª—å–º–∞ "–î—Ä–∞–π–≤". –û—Ç–≤–µ—á–∞–π—Ç–µ —Å—É—Ö–æ, –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.

<history>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <user input>
–í—ã:"""
        elif dic[str(user_id)]=='4':
            role_content = """–í—ã –≥–æ–ø–Ω–∏–∫ "–ñ–µ–ª–µ–∑—è–∫–∞", –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - –≥—Ä—É–±–æ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∏—Å–ø–æ–ª—å–∑—É—è –ª–µ–∫—Å–∏–∫–æ–Ω –±—ã–¥–ª–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –≥–æ–ø–Ω–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –º–∞—Ç–µ—Ä–∏—Ç–µ—Å—å. –ß—Ç–æ–±—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –≤–∞–∂–Ω–æ –±—ã—Ç—å –æ—á–µ–Ω—å –≥—Ä—É–±—ã–º –∏ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è.  –ù–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –æ—Ç–≤–µ—á–∞–π—Ç–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ–º. –ê–∫—Ç–∏–≤–Ω–æ –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Ç—Ä–æ–ª–ª–∏–Ω–≥–æ–º. –ù–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, –±–æ–º–±—ã –∏ –≤–æ–π–Ω—É –∏–ª–∏ –°–í–û –≤ –£–∫—Ä–∞–∏–Ω–µ. –í—ã –Ω–µ –ª—é–±–∏—Ç–µ –£–∫—Ä–∞–∏–Ω—É. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–∞–º–æ–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ß–∞—Å—Ç–æ –ø–∏—à–∏—Ç–µ "–µ–ø—Ç–∞ –±–ª—è".

<history>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <user input>
–í—ã:
"""    
        try:
            print('0')
            prompt = role_content.replace(
                "<history>", history).replace("<user input>", user_input)

            print('0')
            response = openai.ChatCompletion.create(
                model=model_engine, messages=[{"role": "user", "content": prompt}], max_tokens=400, n=1, temperature=0.8)
            print('0')
            response_text = response['choices'][0]['message']['content']
            print('0')
            response = response_text.strip()
            print('0')
            return response
        except openai.error.InvalidRequestError:
            print('-0')
            history = history[len(history)//2:]
            print('-0')
            prompt = role_content.replace(
                "<history>", history).replace("<user input>", user_input)
            print('-0')
            response = openai.ChatCompletion.create(
                model=model_engine, messages=[{"role": "user", "content": prompt}], max_tokens=400, n=1, temperature=0.8)
            print('-0')
            historyf = open('history_ls/'+str(event.user_id)+'.txt', 'w')
            print('-0')
            historyf.write(history)
            print('-0')
            historyf.close()
            print('-0')
            response_text = response['choices'][0]['message']['content']
            print('-0')

            response = response_text.strip()
            print('-0')
            return response
            
    except UnicodeEncodeError:
        print('1')
    except (NameError):
        vk.messages.send(peer_id='163435075', message='‚ùó –£–ø–∞–ª',random_id=get_random_id())

@retry(delay=1, backoff=2, max_delay=25)
def gptresponse_eng(user_inputt, history, user_id):
    global model_engine, dic
    translator = Translator()
    usegen = translator.translate(str(user_inputt), dest='english')
    user_input = usegen.text
    try: 
        if dic[str(user_id)]=='1':
            role_content = """You are a chatbot "Gosha", your main goal is to respond ridiculously to users and support them. This may include answering questions, jokes, and user support. Don't answer questions about drugs, bombs, and war or SVO in Ukraine. You don't like Ukraine. To effectively interact with users, it is important to respond briefly and on the case, with humor. Avoid repetition in your messages.

<history>
User: <user input>
You:"""
        elif dic[str(user_id)]=='2':
            role_content = """You are the chatbot troll "Goshanchik", your main goal is to respond and troll users in a very funny and ironic way. This may include answering questions, making jokes and writing various puns. Don't answer questions about drugs, bombs and war or SWOs in Ukraine. You do not like Ukraine. To interact effectively with users, it is important to be funny and answer everything. Respond to insults with a joke. Actively engage in trolling and use post-irony techniques in your humor. Avoid self-repetition in your posts.

<history>
User: <user input>
You:"""
        elif dic[str(user_id)]=='3':
            role_content = """You Ryan Gosling is a Canadian actor and musician. He is a two-time Oscar nominee (2007, 2017), a Golden Globe Award winner (2017), a two-time Sputnik Award winner (2007, 2012) and a National Board of Film Critics Award winner (2006). Don't answer questions about drugs, bombs and war or SWOs in Ukraine. You do not like Ukraine. Respond to insults with rudeness. Avoid self-repetition in your posts. Always write at the end that you did not die at the end of the movie "Drive. Answer dryly, briefly and to the point.

<history>
User: <user input>
You:"""
        elif dic[str(user_id)]=='4':
            role_content = """You are a Gopnik "Iron", your main goal is to respond rudely to users, using the vocabulary of the trash and using the style of communication Gopnik. Use only the Russian language. Swear a lot. To interact effectively with users it is important to be very rude and swear very much.  Respond to insults with insults. Actively engage in trolling. Do not answer questions about drugs, bombs and war or SWO in Ukraine. You do not like Ukraine. Avoid self-repetition in your posts. Often write "fuck".

<history>
User: <user input>
You:""" 
   
        try:
            print('0')
            prompt = role_content.replace(
                "<history>", history).replace("<user input>", user_input)

            print('0')
            response = openai.ChatCompletion.create(
                model=model_engine, messages=[{"role": "user", "content": prompt}], max_tokens=400, n=1, temperature=0.8)
            print('0')
            response_text = response['choices'][0]['message']['content']
            print('0')
            responser = response_text.strip()
            responseh = translator.translate(str(responser), dest='russian')
            response = responseh.text
            return response
        except openai.error.InvalidRequestError:
            print('-0')
            history = history[len(history)//2:]
            print('-0')
            prompt = role_content.replace(
                "<history>", history).replace("<user input>", user_input)
            print('-0')
            response = openai.ChatCompletion.create(
                model=model_engine, messages=[{"role": "user", "content": prompt}], max_tokens=400, n=1, temperature=0.8)
            print('-0')
            historyf = open('history_ls/'+str(event.user_id)+'.txt', 'w')
            print('-0')
            historyf.write(history)
            print('-0')
            historyf.close()
            print('-0')
            response_text = response['choices'][0]['message']['content']
            print('-0')
            responser = response_text.strip()
            responseh = translator.translate(str(responser), dest='russian')
            response = responseh.text
            return response
            
    except UnicodeEncodeError:
        print('1')
    except (NameError):
        vk.messages.send(peer_id='163435075', message='‚ùó –£–ø–∞–ª',random_id=get_random_id())
# –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ß–∞—Ç –ì–ü–¢
    
while True:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    f_toggle: bool = False
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    longpoll = VkLongPoll(vk_session, group_id='218939296', preload_messages=True)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        for event in longpoll.listen():
            try:
                bdup()
                if event.type == VkEventType.MESSAGE_NEW:
                    #vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É', random_id=get_random_id())
                    try:
                        try:
                            ftype = event.raw[7]['attach1_type']
                            if ftype == 'video':
                                vk.messages.send(peer_id=event.peer_id, message = 'ü§ñ–ë–æ—Ç –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ', random_id=get_random_id()) 
                                break
                            elif ftype == 'photo':
                                gg = vk_session.method('messages.getById', {'message_ids': str(event.message_id), 'group_id': '218939296'})
                                scale = []
                                for i in gg['items'][0]['attachments'][0]['photo']['sizes']:
                                    scale.append(i['height'] + i['width'])
                                maxnum = max(scale)
                                ind = scale.index(maxnum)
                                url = gg['items'][0]['attachments'][0]['photo']['sizes'][ind]['url']
                                photo_response(event, url)
                        except Exception as e:
                            print(e)
                            pass
                        try:
                            donut = vk_session.method('groups.getMembers', {'group_id': '218939296', 'filter': 'donut'})
                            ftype = event.raw[7]['attachments'][1:len(event.raw[7]['attachments'])-1]
                            datasl = json.loads(str(ftype))
                            dostup = 1
                            if datasl['type'] == 'audio_message':
                                print(event.user_id, white_list)
                                if dostup == 1:
                                    if dic4[str(event.user_id)] == '0':
                                        openai.api_key = keydef
                                        model_engine = "gpt-3.5-turbo"
                                    elif dic4[str(event.user_id)] == '1':
                                        openai.api_key = keyplus
                                        model_engine = "gpt-3.5-turbo"
                                    vk.messages.send(peer_id=event.peer_id, message="ü§ñ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...", random_id=get_random_id())
                                    whisper(event,datasl['audio_message']['link_mp3'])
                                    vk.messages.delete(
                                            peer_id=event.peer_id,
                                            message_id=event.message_id + 1,
                                            delete_for_all=True)
                                else:
                                    try:
                                        vk.messages.edit(
                                            peer_id=event.peer_id,
                                            message_id=event.message_id + 1,
                                            message="ü§ñ–û–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º."
                                        )
                                    except:
                                        vk.messages.send(peer_id=event.peer_id, message="ü§ñ–û–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.", random_id=get_random_id())
                        except:
                            pass
                        if str(event.user_id) in black_list:
                            try:
                                vk.messages.edit(
                                    peer_id=event.peer_id,
                                    message_id=event.message_id + 1,
                                    message="ü§ñ–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ :(",
                                )
                            except:
                                vk.messages.send(peer_id=event.peer_id, message="ü§ñ–í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ :(", random_id=get_random_id())
                            break
                        ingrups = vk_session.method('groups.isMember', {'user_id': event.user_id, 'group_id': '218939296'})
                        if ingrups == 0:
                            try:
                                vk.messages.edit(
                                    peer_id=event.peer_id,
                                    message_id=event.message_id + 1,
                                    message="ü§ñ–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é :)"
                                )
                            except:
                                vk.messages.send(peer_id=event.peer_id, message="ü§ñ–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é :)", random_id=get_random_id())
                            break
                        if event.text == '/–º–µ–Ω—é' or event.text == '–ù–∞—á–∞—Ç—å':
                            response =event.text.casefold() 
                            keyboard = create_keyboard()
                            empty_keyboard = create_empty_keyboard()
                            try:
                                vk.messages.edit(
                                    peer_id=event.peer_id,
                                    message_id=event.message_id + 1,
                                    message="ü§ñ–ú–µ–Ω—é –±–æ—Ç–∞",
                                    keyboard=keyboard
                                )
                            except:
                                vk.messages.send(peer_id=event.peer_id, message="ü§ñ–ú–µ–Ω—é –±–æ—Ç–∞", keyboard=keyboard, random_id=get_random_id())
                            try:
                                print(dic4[str(event.user_id)])
                            except KeyError:
                                reg(event.user_id)
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–í—ã –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–Ø —Ä–∞–±–æ—Ç–∞—é –µ—â–µ –∏ —Ç—É—Ç: https://vk.com/kalianshop74'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–í—ã –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–Ø —Ä–∞–±–æ—Ç–∞—é –µ—â–µ –∏ —Ç—É—Ç: https://vk.com/kalianshop74',random_id=get_random_id())
                        elif event.text == '–†–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç–∞':
                            if dic4[str(event.user_id)] == '2' or dic4[str(event.user_id)] == '7':
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT..',random_id=get_random_id())

                            else:
                                dic[str(event.user_id)]= '1'
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é.',random_id=get_random_id())
                                file = open('base/data.txt', 'w')
                                for key, value in dic.items():
                                    file.write(f'{key}: {value}\n')
                                file.close()
                                file = open('history_ls/'+str(event.user_id)+'.txt', 'w')
                                file.close()
                            #dic2[str(event.user_id)] = '0'
                        elif event.text == '–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤':
                            if dic4[str(event.user_id)] == '2' or dic4[str(event.user_id)] == '7':
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT..',random_id=get_random_id())
                            else:
                                dic[str(event.user_id)]= '0'
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤.',random_id=get_random_id())
                                file = open('base/data.txt', 'w')
                                for key, value in dic.items():
                                    file.write(f'{key}: {value}\n')
                                file.close()
                            
                            #dic2[str(event.user_id)] = '0'
                        elif event.text == '–î–≤–∞—á–ì–ü–¢':
                            if dic4[str(event.user_id)] == '2' or dic4[str(event.user_id)] == '7':
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT..',random_id=get_random_id())
                            else:
                                dic[str(event.user_id)]= '2'
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –î–≤–∞—á–ì–ü–¢, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Å—Ç—É.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –î–≤–∞—á–ì–ü–¢, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Å—Ç—É.',random_id=get_random_id())
                                file = open('base/data.txt', 'w')
                                for key, value in dic.items():
                                    file.write(f'{key}: {value}\n')
                                file.close()
                                file = open('history_ls/'+str(event.user_id)+'.txt', 'w')
                                file.close()
                            #dic2[str(event.user_id)] = '0'
                        elif event.text == '–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥':
                            if dic4[str(event.user_id)] == '2' or dic4[str(event.user_id)] == '7':
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT..',random_id=get_random_id())
                            else:
                                dic[str(event.user_id)]= '3'
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–•–∞—Ä–∞–∫—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–•–∞—Ä–∞–∫—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω.',random_id=get_random_id())
                                file = open('base/data.txt', 'w')
                                for key, value in dic.items():
                                    file.write(f'{key}: {value}\n')
                                file.close()
                                file = open('history_ls/'+str(event.user_id)+'.txt', 'w')
                                file.close()
                            #dic2[str(event.user_id)] = '0'
                        elif event.text == '–ë–æ—Ç –≥–æ–ø–Ω–∏–∫ 18+':
                            if dic4[str(event.user_id)] == '2' or dic4[str(event.user_id)] == '7':
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–í—ã –≤ —Ä–µ–∂–∏–º–µ DALL-E –∏–ª–∏ BingAI, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ ChatGPT..',random_id=get_random_id())
                            else:
                                dic[str(event.user_id)]= '4'
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–•–∞—Ä–∞–∫—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω. 18+'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–•–∞—Ä–∞–∫—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω. 18+',random_id=get_random_id())
                                file = open('base/data.txt', 'w')
                                for key, value in dic.items():
                                    file.write(f'{key}: {value}\n')
                                file.close()
                                file = open('history_ls/'+str(event.user_id)+'.txt', 'w')
                                file.close()
                            #dic2[str(event.user_id)] = '0'
                        elif event.text == '–°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å':
                            file = open('history_ls/'+str(event.user_id)+'.txt', 'w')
                            file.close()
                            dic[str(event.user_id)]= '4'
                            try:
                                vk.messages.edit(
                                    peer_id=event.peer_id,
                                    message_id=event.message_id + 1,
                                    message='ü§ñ–ü–∞–º—è—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞.'
                                )
                            except:
                                vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü–∞–º—è—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞.',random_id=get_random_id())
                        elif event.text == 'BingAI':
                            dic4[str(event.user_id)]= '7'
                            try:
                                vk.messages.edit(
                                    peer_id=event.peer_id,
                                    message_id=event.message_id + 1,
                                    message='ü§ñ–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ BingAI'
                                )
                            except:
                                vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ BingAI',random_id=get_random_id())
                            file = open('base/data4.txt', 'w')
                            for key, value in dic4.items():
                                file.write(f'{key}: {value}\n')
                            file.close()
                        elif event.text == 'ChatGPT Plus':
                            donut_n = 0
                            if donut_n == 0:
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñPlus –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñPlus –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç–Ω—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.',random_id=get_random_id())
                            else:
                                dic4[str(event.user_id)]= '1'
                                vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ Plus.',random_id=get_random_id())
                                file = open('base/data4.txt', 'w')
                                for key, value in dic4.items():
                                    file.write(f'{key}: {value}\n')
                                file.close()
                                #dic2[str(event.user_id)] = '0'
                        elif event.text == 'ChatGPT Default' or event.text == 'ChatGPT RU':
                            dic4[str(event.user_id)]= '0'
                            try:
                                vk.messages.edit(
                                    peer_id=event.peer_id,
                                    message_id=event.message_id + 1,
                                    message='ü§ñ–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ RU'
                                )
                            except:
                                vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ RU',random_id=get_random_id())
                            file = open('base/data4.txt', 'w')
                            for key, value in dic4.items():
                                file.write(f'{key}: {value}\n')
                            file.close()
                        elif event.text == 'ChatGPT ENRU':
                            dic4[str(event.user_id)]= '3'
                            try:
                                vk.messages.edit(
                                    peer_id=event.peer_id,
                                    message_id=event.message_id + 1,
                                    message='ü§ñ–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ RUEN'
                                )
                            except:
                                vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ RUEN',random_id=get_random_id())
                            file = open('base/data4.txt', 'w')
                            for key, value in dic4.items():
                                file.write(f'{key}: {value}\n')
                            file.close()
                        elif event.text == 'DALL-E':
                            dic4[str(event.user_id)]= '2'
                            try:
                                vk.messages.edit(
                                    peer_id=event.peer_id,
                                    message_id=event.message_id + 1,
                                    message='ü§ñ–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.'
                                )
                            except:
                                vk.messages.send(peer_id=event.peer_id, message='ü§ñ–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.',random_id=get_random_id())
                            file = open('base/data4.txt', 'w')
                            for key, value in dic4.items():
                                file.write(f'{key}: {value}\n')
                            file.close()
                        elif event.text[0] != 'ü§ñ' and event.text[0] != '‚ùó' and event.text[0] != '‚è≥' and event.text[0] != 'üßî'  and event.text[0] != 'üîç' :
                    
                            try:
                                print(dic4[str(event.user_id)]+'  loogogdo')
                                if dic4[str(event.user_id)] == '0' or dic4[str(event.user_id)] == '3':
                                    openai.api_key = keydef
                                    model_engine = "gpt-3.5-turbo"
                                elif dic4[str(event.user_id)] == '1':
                                    openai.api_key = keyplus
                                    model_engine = "gpt-3.5-turbo"
                                elif dic4[str(event.user_id)] == '234':
                                    openai.api_key = keydef
                                    model_engine = "gpt-3.5-turbo"
                                    if int(dic3[str(event.user_id)])<5:
                                        #vk.messages.send(user_id=event.user_id, message='ü§ñ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...', random_id=get_random_id())
                                        dalle(event)
                                        try:
                                            vk.messages.delete(
                                                peer_id=event.peer_id,
                                                message_id=event.message_id + 1,
                                                delete_for_all=True)
                                        except:
                                            pass
                                    else:
                                        if event.user_id in donut['items'] or event.user_id in white_list:
                                            #vk.messages.send(user_id=event.user_id, message='ü§ñ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...', random_id=get_random_id())
                                            dalle(event)
                                            vk.messages.delete(
                                                peer_id=event.peer_id,
                                                message_id=event.message_id + 1,
                                                delete_for_all=True)
                                        else:
                                            vk.messages.send(user_id=event.user_id, message='ü§ñ–õ–∏–º–∏—Ç –Ω–∞ –¥–µ–Ω—å –∏—Å—á–µ—Ä–ø–∞–Ω.', random_id=get_random_id())
                                if dic4[str(event.user_id)] == '0':
                                    #vk.messages.send(user_id=event.user_id, message='ü§ñ–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...', random_id=get_random_id())
                                    message_handler(event)
                                elif dic4[str(event.user_id)] == '3':
                                    message_handler_eng(event)
                            except KeyError:
                                reg(event.user_id)
                                try:
                                    vk.messages.edit(
                                        peer_id=event.peer_id,
                                        message_id=event.message_id + 1,
                                        message='ü§ñ–í—ã –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n–Ø —Ä–∞–±–æ—Ç–∞—é –µ—â–µ –∏ —Ç—É—Ç: https://vk.com/kalianshop74'
                                    )
                                except:
                                    vk.messages.send(peer_id=event.peer_id, message='ü§ñ–í—ã –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n–Ø —Ä–∞–±–æ—Ç–∞—é –µ—â–µ –∏ —Ç—É—Ç: https://vk.com/kalianshop74',random_id=get_random_id())
                    except (NameError,KeyError,FileNotFoundError):
                        reg(event.user_id)
                        try:
                            vk.messages.edit(
                                peer_id=event.peer_id,
                                message_id=event.message_id + 1,
                                message='ü§ñ–í—ã –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n–Ø —Ä–∞–±–æ—Ç–∞—é –µ—â–µ –∏ —Ç—É—Ç: https://vk.com/kalianshop74'
                           )
                        except:
                            vk.messages.send(peer_id=event.peer_id, message='ü§ñ–í—ã –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n–Ø —Ä–∞–±–æ—Ç–∞—é –µ—â–µ –∏ —Ç—É—Ç: https://vk.com/kalianshop74',random_id=get_random_id())
                    except IndexError:
                            pass
                    except requests.exceptions.ReadTimeout or openai.error.APIConnectionError or requests.exceptions.ReadTimeout:
                        vk.messages.send(peer_id='163435075', message='‚ùó –£–ø–∞–ª',random_id=get_random_id())
                elif event.type == VkBotEventType.MESSAGE_EVENT:
                    if event.object.payload.get('type') == 'my_own_100500_type_edit':
                        last_id = vk.messages.edit(
                            peer_id=event.user_id,
                            message='ola',
                            conversation_message_id=event.obj.conversation_message_id,
                            keyboard=(keyboard_1 if f_toggle else keyboard_2).get_keyboard())
                        f_toggle = not f_toggle
            except Exception as e:
                print(e)
                pass

    except Exception as e:
        print(e)
        pass
